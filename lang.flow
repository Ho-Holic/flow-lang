
########################################################
# 
# FLOW LANGUAGE SPEC v0.1
#
########################################################

----------------------------------------- Key concepts

# 1. Write without symmetrics '{}', '[]', ()
# 2. Write code without pressing 'back arrow'
# 3. Maximum formatting support from compiler (don't compile bad code)
# 4. Make code look pretty
# 5. Avoid concept duplicates like 'for, while, do'. Most general idea to express all

----------------------------------------- Flow

->    function call

=>    function definition

|     new line (with proper spacing or onliner mode?)

----------------------------------------- Type Annotation

# All types start from big letters

# fast types I32, I64, I16, I32u, I8 or Integer32 is ok?

# 1. No type annotation

x = 3

# 2. Separate type annotation

x :: Integer
x = 3 

# 3. Inline type annotation

x = 3 :: Integer


# function example

foo x => x * x :: Integer -> Integer

foo :: Integer -> Integer
foo x => x * x 


#foo . bar -> x # same as (foo(bar))(x) in C++

foo -> bar -> x # same as foo(bar(x)) aka x' = bar(x); foo(x')

---------------------------------------- const

# const is not a type specifier

const x = 3 :: Integer

---------------------------------------- Smart shadowing

x = 3
x = "3" :: shadow Integer 

y = 1 + x       # 4
str = "cat" + x # cat3 

----------------------------------------- Threads

thread_id = thread -> 
              foo x => 1 2 3

join -> thread_id 
# or you can
detach-> thread_id

----------------------------------------- Coroutine

range a to:b =>
  loop a < b and a > 0
    branch yield a
    a += 1
  return -> ???    

range a to:b => loop | a < b and a > 0 | branch yield -> a | a += 1

loop 
  i = range -> 0 to 10
  print -> i

loop   
  print -> | range -> 0 10 |

loop   
  print -> range -> 0 10


# bind loop to a variable
# lazy prevent auto execution of a loop

x = lazy loop | print -> 15    

x -> nothing

----------------------------------------- Testing

test basic_case
  equal 2 | sqrt -> 4 
  equal 3 | sqrt -> 9

----------------------------------------- Library

library HashTable
  take_hash obj -> _ # search same name
  view HashTable -> HashTable_v2

----------------------------------------- Import /Include

require -> HashTable

require -> HashTable from "https://www.github.com/blabla/hash.git"

require libName from:path =>
  ???

----------------------------------------- Multiarguments  

# now you have N-args for 'path'

require libName [from:path...] =>
  ???

# usage

require -> io from "C:/io.flow" 
              from "www.github.com/blabla/io.git"
  
----------------------------------------- Invariant (static assert) 

foo x =>
  invariant (x < 3)
  return -> (x + 3)

----------------------------------------- Variable

x = 3 
str = "cat"

----------------------------------------- Logical

# ok to have '(' and ')' in math and they are forced

x = ((true or false and true) xor false)

x = (3 * (5-2))

----------------------------------------- Idempotent

type ColorChannel red green blue :: Integer + Integer + Integer  # union?

type Color
  red   :: Integer  
  green :: Integer
  blue  :: Integer

type Color red green blue :: Integer x Integer x Integer  

type Color red green blue 
Color :: Integer x Integer x Integer  

idempotent ColorChannel -> Red # now red is basic 'default' value

----------------------------------------- Branch (if/switch/pattern match)

# vertical separator '|' used to write one-liners

# one-liner 'if'

foo -> branch | x < 3 | call -> exit | call -> relaunch

branch | isCompleted | true -> exit -> 3 | false -> relaunch -> 5 # it is ok to have extra '|'

branch isCompleted | true -> exit -> 3 | false -> relaunch -> 5


# normal 'if'

branch isCompleted
  true -> exit -> 3     
  false -> relaunch -> 5 

# short hand normal if, first case is always important one

branch is completed 
  exit -> 3
  relaunch -> 5

branch var_type 
  "Int"    -> calcForInt  
  "Double" -> calcForDouble             

scope calcForInt
  ???

scope calcForDouble
  ???

doc

  Different types of data

  1 2 3        # 1. similar types  
  1 "cat" true # 2. different types

  Similar type can be handled by 'graph'
  Different type can be handled by 'type'

----------------------------------------- Is operator

# seems no sense in it, try to experiment with it

branch is bidirectional? -> x
  true -> makeData

----------------------------------------- Graph (Seq, Tree)

graph 1 2 3

graph 1 = "cat" # directional
      2 = "dog"
      1 -> 2

graph 1 <-> 2    # bi directional
      7 <-> 12      

graph 8 -> 3 # tree
      3 -> 1
      3 -> 6
      6 -> 4
      6 -> 7
      8 -> 10
      10 -> 14
      14 -> 13

graph 8 -> 3 10 # this also works
      3 -> 1 6
      6 -> 4 7
      10 -> 14 -> 13      

#        8
#      /   \
#     3     10
#    / \      \
#   1   6     14
#      / \    / 
#     4  7   13

type RoadPoint
  name
  weight

graph RoadPoint
  p1 = "Тверская"   0.25 
  p2 = "Пушкинская" 2.38
  p1 -> p2

# similar to call of   

graph 
  p1 = RoadPoint -> "Тверская"   0.25 
  p2 = RoadPoint -> "Пушкинская" 2.38

----------------------------------------- Seq (array)

# seq is graph with only nodes, no connections. Do we need syntactic sugar?

seq 1 2 3

seq "cat" "dog" "fish"

seq "cat"
    "dog"
    "fish"

x = seq 1 2 3    

count = size x # count is 3

----------------------------------------- How to define XML like structure?

{
  logSystem: {
    enabled: true,
    savePath: "/tmp/log.txt"
  },
  loader: {
    load_type: automatic,
    timeout: 4000
  }
}

x = type root
      type logSystem
           enabled true
           savePath "/tmp/log.txt"
      type loader
           switch_type automatic
           timeout 4000

----------------------------------------- View (typedef on steroids)

type Point
     x
     y

view Size   -> Point
     width  -> x
     height -> y  

view 1DPoint -> 2DPoint
      x      -> x
      y      -> x - y      

----------------------------------------- Scope

scope
  print -> 6
  print -> "I like cats"

scope lock_mutex # named scope
  do_stuff  

x = scope do_stuff  # what this can be?
  print -> 42
  
foo -> x  

----------------------------------------- Loops

processEvents x => branch x
  window   -> event x y z
  keyboard -> event key autoRepeat

loop processEvents

loop # good
  ???

loop x < 3 
  ???

-----------------------------------------

scope sendData
  send -> to socket with data

loop needMoreStep
  sendData

-----------------------------------------        

loop x in seq 1 2 3 
  ???

loop [0, i < vec_size] # how make this work?
  ???  
  i += 1 # don't lie to programmer


----------------------------------------- Function definition (one liner)

printPoint x y => print -> "($x, $y)" # normal function
         _ x y => print -> "($x, $y)" # anonymous function
             _ => print -> "($_, $_)" # anonymous function (discard args)


----------------------------------------- Function definition (lambda)

# seems that underscore lambda syntax is preferable

exec -> _ x y => x + y

exec -> \x y => x + y

exec -> . x y => x + y

exec -> x y => x + y

find ->
  _ x => x < 3
  _ y => y > 0

find ->
  \ x => x < 3
  \ y => y > 0

find ->
  . x => x < 3
  . y => y > 0

----------------------------------------- Function definition (clojure)

global_flag = true
k = 12

# clojure by reference
exec -> 
  _ x y => branch | &global_flag | x + y | x - y * k 

# clojure by value
exec -> 
  _ x y => branch | global_flag | x + y | x - y * k   

----------

global_flag = true

# clojure by reference
exec -> 
  _ x y => branch | global_flag | x + y | x - y * k | with ref global_flag 
                                                           ref k
# clojure by reference
exec -> 
  _ x y => branch | global_flag | x + y | x - y * k 
  with ref global_flag 
       ref k

# clojure by value
exec -> 
  _ x y => branch | global_flag | x + y | x - y * k      

exec -> 
  _ x y => branch | global_flag | x + y | x - y * k | with copy global_flag copy k     

----------------------------------------- Function definition (discard args)

# TODO: do we realy need discard?

# no discard
sum a b => a + b 

# normal

sum _ => _ + _ # TODO: bug here, looks like lambda, 'sum _' part

# lambda syntax
fold -> 
  list
  _ => _ + _

fold -> list _ => _ + _

----------------------------------------- Function definition (one liner)

# normal function
printPoint x y => 
  print -> "($x, $y)" 

# anonymous function
x y => 
  print -> "($x, $y)" 

# anonymous function (discard args)                 
=> print -> "($_, $_)" 

----------------------------------------- Function definition (various)

sum x y => x * y    # good

forall list apply:f => ???

forall -> seq 1 2 3 
          apply: x => x * x

----------------------------------------- Function uniform call

foo x y => x + y

foo -> 3 5

3 -> foo 5

3 5 -> foo

----------------------------------------- Function Generation

# normal notation
set[Reset WrapAround Update]Modifier modifier = 
  m[Reset WrapAround Update] = modifier

# short notation (in development)
set[Reset WrapAround Update]Modifier modifier -> 
  m[...] = modifier 

----------------------------------------- Function Tags

doc
  By default for function 'find x y source'
  compiler will generate 'find x:x y:y source:source' tags
  and you can use them any time, even if you rename tag 'source' to 'in'
  This also allows argument rearrangement

find x y in:source = ???

find ->
  x:5 y:3 
  in: "/home/user/1.txt"

find -> 5 3 in: "/home/user/1.txt"

find -> in: "/home/user/1.txt" 5 3 # allow rearrangement without explicit x:5 y :3

----------------------------------------- Function call

# -> you don't need to wrap arguments into () 

print -> n

foo -> 
  => x * x

foo ->
  x => x * y 

loop i <- list
  print -> i # this is function call
  set   -> i 
           i+1      

point -> x y # constructor function


  
----------------------------------------- Logical operators

res = x equal y
res = x not equal y

res = x === y
res = x =/= y

-----------------------------------------  Void Functions

terminate nothing -> someCleverCode

call x = x -> nothing # some alternative name? 

call -> terminate # this is void function call wrapper

-----------------------------------------  Top/Bottom types

#  any time can be a nothing so you can call foo -> 3 and value of 3 would be discarded
# because this is void function

foo nothing -> nothing

? = nothing
??? = nothing

----------------------------------------- Comments

# Single line comment. Why '#' ? It is good for drawing

################################
#                              #
# Box is very nice and usefull #
#                              #
################################

# No multiline comments

# What about documentation comments?

-- Also one liner doc? Why not...

----------------------------------------- Look it is awesome

x = 3 

----------------------------------------- Write code and split it

doc

  You can write some neat text here
  A lot of text
  Some function documentation and so on
  You can place it in different file
  It has more keywords to use, like:
    arg x -> Argument @self of type integer # @self is 'x' in processed doc



foo x -> x * x

doc foo # this is function documentation
  Fancy square function  
  args x of type integer

----------------------------------------- Use doc for big strings

# use doc for big strings is bad idea!!!
# need new keyword

x = 3
y = 7

text = doc 
  a lot of neat text here  
  with some  x = @x, y = @y
  this actually is multiline string


----------------------------------------- Modern TODO

note hack remove hardcoded port

connect -> database address 1234

----------------------------------------- Fancy formatting

take x => foo-> x x + 1

take x => 
  foo-> x 
        x + 1

take x => | foo -> x 
          |        x + 1 


take x =>
| foo -> x 
| |      x + 1         


take x =>
| foo -> x 
|      | x + 1         
| bar -> x 
|      | x + 2  

